using System;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;

#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GasbWcf
{
    [Database(Name="PrimeDb")]
	public partial class PrimeDataContext : DataContext
	{
		
		private static MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertJob(Job instance);
    partial void UpdateJob(Job instance);
    partial void DeleteJob(Job instance);
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    #endregion
		
		public PrimeDataContext() : 
				base(ConfigurationManager.ConnectionStrings["PrimeDbConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PrimeDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PrimeDataContext(IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PrimeDataContext(string connection, MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PrimeDataContext(IDbConnection connection, MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Table<Job> Jobs
		{
			get
			{
				return this.GetTable<Job>();
			}
		}
		
		public Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
	}
	
	[Table(Name="dbo.Job")]
	public partial class Job : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private Guid _Id;
		
		private int _N;
		
		private Guid _Client_Id;
		
		private DateTime _Assign_Date;
		
		private Nullable<bool> _Result;
		
		private Nullable<DateTime> _Result_Date;
		
		private EntityRef<Client> _Client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(Guid value);
    partial void OnIdChanged();
    partial void OnNChanging(int value);
    partial void OnNChanged();
    partial void OnClient_IdChanging(Guid value);
    partial void OnClient_IdChanged();
    partial void OnAssign_DateChanging(DateTime value);
    partial void OnAssign_DateChanged();
    partial void OnResultChanging(Nullable<bool> value);
    partial void OnResultChanged();
    partial void OnResult_DateChanging(Nullable<DateTime> value);
    partial void OnResult_DateChanged();
    #endregion
		
		public Job()
		{
			this._Client = default(EntityRef<Client>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_N", DbType="Int NOT NULL")]
		public int N
		{
			get
			{
				return this._N;
			}
			set
			{
				if ((this._N != value))
				{
					this.OnNChanging(value);
					this.SendPropertyChanging();
					this._N = value;
					this.SendPropertyChanged("N");
					this.OnNChanged();
				}
			}
		}
		
		[Column(Storage="_Client_Id", DbType="UniqueIdentifier NOT NULL")]
		public Guid Client_Id
		{
			get
			{
				return this._Client_Id;
			}
			set
			{
				if ((this._Client_Id != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClient_IdChanging(value);
					this.SendPropertyChanging();
					this._Client_Id = value;
					this.SendPropertyChanged("Client_Id");
					this.OnClient_IdChanged();
				}
			}
		}
		
		[Column(Storage="_Assign_Date", DbType="SmallDateTime NOT NULL")]
		public DateTime Assign_Date
		{
			get
			{
				return this._Assign_Date;
			}
			set
			{
				if ((this._Assign_Date != value))
				{
					this.OnAssign_DateChanging(value);
					this.SendPropertyChanging();
					this._Assign_Date = value;
					this.SendPropertyChanged("Assign_Date");
					this.OnAssign_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Result", DbType="Bit")]
		public Nullable<bool> Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					this.OnResultChanging(value);
					this.SendPropertyChanging();
					this._Result = value;
					this.SendPropertyChanged("Result");
					this.OnResultChanged();
				}
			}
		}
		
		[Column(Storage="_Result_Date", DbType="SmallDateTime")]
		public Nullable<DateTime> Result_Date
		{
			get
			{
				return this._Result_Date;
			}
			set
			{
				if ((this._Result_Date != value))
				{
					this.OnResult_DateChanging(value);
					this.SendPropertyChanging();
					this._Result_Date = value;
					this.SendPropertyChanged("Result_Date");
					this.OnResult_DateChanged();
				}
			}
		}
		
		[Association(Name="Client_Job", Storage="_Client", ThisKey="Client_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Jobs.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Jobs.Add(this);
						this._Client_Id = value.Id;
					}
					else
					{
						this._Client_Id = default(Guid);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Client")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private Guid _Id;
		
		private string _Mail;
		
		private EntitySet<Job> _Jobs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(Guid value);
    partial void OnIdChanged();
    partial void OnMailChanging(string value);
    partial void OnMailChanged();
    #endregion
		
		public Client()
		{
			this._Jobs = new EntitySet<Job>(new Action<Job>(this.attach_Jobs), new Action<Job>(this.detach_Jobs));
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Mail", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Mail
		{
			get
			{
				return this._Mail;
			}
			set
			{
				if ((this._Mail != value))
				{
					this.OnMailChanging(value);
					this.SendPropertyChanging();
					this._Mail = value;
					this.SendPropertyChanged("Mail");
					this.OnMailChanged();
				}
			}
		}
		
		[Association(Name="Client_Job", Storage="_Jobs", ThisKey="Id", OtherKey="Client_Id")]
		public EntitySet<Job> Jobs
		{
			get
			{
				return this._Jobs;
			}
			set
			{
				this._Jobs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
}
#pragma warning restore 1591
